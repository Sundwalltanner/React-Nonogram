{"version":3,"sources":["components/common/constants.js","components/game/index.js","index.js"],"names":["DefaultDimensions","SquareValue","EMPTY","FILLED","MARKED","properties","1","name","2","3","DimensionsChoices","Hints","rows","cols","this","DimensionChoices","choices","i","length","push","id","HintNumbers","props","hintNumbers","a","goalHints","aSection","currentIt","b","currentHints","className","type","area","Square","index","value","onMouseDown","onMouseEnter","Board","loc","squares","event","col","dimensions","temp","row","renderSquare","React","Component","Game","size","state","current","Array","fill","history","stepNumber","lMouseDown","rMouseDown","initialSquare","currentAction","changed","seconds","timer","setState","Date","toISOString","substr","interval","setInterval","tick","generateWinState","prevProps","prevState","winSquares","Math","random","getHintNumbers","slice","concat","button","rowHints","num","getSquareIndex","colHints","step","document","getElementById","selectedIndex","nextDimensions","onContextMenu","e","preventDefault","onMouseUp","appendHistory","winCheck","squareClick","squareHover","onClick","undoAction","redoAction","restart","ReactDOM","render"],"mappings":"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","file":"static/js/main.60837463.chunk.js","sourcesContent":["export var DefaultDimensions = {\r\n  ROWS: 5,\r\n  COLS: 5,\r\n};\r\n\r\nexport var SquareValue = {\r\n  EMPTY: 1,\r\n  FILLED: 2,\r\n  MARKED: 3,\r\n  properties: {\r\n    1: {name: \"empty\"},\r\n    2: {name: \"filled\"},\r\n    3: {name: \"marked\"}\r\n  }\r\n};\r\n\r\nexport var DimensionsChoices = [\r\n  [5, 5],\r\n  [10, 5],\r\n  [10, 10],\r\n  [15, 10],\r\n  [15, 15],\r\n  [20, 15],\r\n  [20, 20],\r\n  [25, 20],\r\n  [25, 25],\r\n  [30, 25],\r\n  [30, 30],\r\n];","import React from \"react\";\r\nimport { DefaultDimensions, SquareValue, DimensionsChoices } from \"../common/constants.js\";\r\nimport \"./index.css\";\r\n\r\n/**\r\n * A basic class containing the structure that makes up the hint\r\n * number values.\r\n */\r\nclass Hints {\r\n  constructor(rows, cols) {\r\n    this.rows = rows;\r\n    this.cols = cols;\r\n  }\r\n}\r\n\r\n/**\r\n * Produces a dropdown selection box for user to select the dimensions\r\n * of the game board when it's reset next.\r\n * \r\n * These choices are pulled from ../common/constants.js.\r\n */\r\nfunction DimensionChoices() {\r\n  let choices = [];\r\n\r\n  for (let i = 0; i < DimensionsChoices.length; i++) {\r\n    choices.push(<option>{DimensionsChoices[i][0] + \"x\" + DimensionsChoices[i][1]}</option>)\r\n  }\r\n\r\n  return (\r\n    <select id=\"dimensions-select\">\r\n      {choices}\r\n    </select>\r\n  )\r\n}\r\n\r\n/**\r\n * Translates either row or column hint numbers into HTML div elements.\r\n * \r\n * The current hint numbers according to the current state of the board\r\n * are compared to the static goal hint numbers in order to \"cross out\"\r\n * some numbers in order to assist the user in figuring out what sequences\r\n * they've already finished.\r\n * \r\n * Crossed out hint numbers appear as a different color than normal hint numbers,\r\n * and are thus given a different div className than normal hint numbers.\r\n * \r\n * @param {*} props \r\n */\r\nfunction HintNumbers(props) {\r\n  let hintNumbers = [];\r\n\r\n  for (let a = 0; a < props.goalHints.length; a++) {\r\n    let aSection = [];\r\n    let currentIt = 0;\r\n\r\n    for (let b = 0; b < props.goalHints[a].length; b++) {\r\n      if (typeof props.currentHints[a][currentIt] !== 'undefined' &&\r\n          props.currentHints[a][currentIt] === props.goalHints[a][b]) {\r\n        currentIt++;\r\n        aSection.push(<div className=\"hint crossout\">{props.goalHints[a][b]}</div>);\r\n      } else {\r\n        aSection.push(<div className=\"hint\">{props.goalHints[a][b]}</div>);\r\n      }\r\n    }\r\n\r\n    hintNumbers.push(<div className={\"hint-\" + props.type}>{aSection}</div>);\r\n  }\r\n\r\n  return (\r\n    <div className={props.area + '-hints'}>\r\n      {hintNumbers}\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Translates individual board squares into HTML div elements.\r\n * \r\n * @param {*} props \r\n */\r\nfunction Square(props) {\r\n  const index = (typeof props.value === 'undefined') ? 1 : props.value;\r\n  const value = SquareValue.properties[index].name;\r\n\r\n  return (\r\n    <div\r\n      className={'square square-' + value}\r\n      onMouseDown={props.onMouseDown}\r\n      onMouseEnter={props.onMouseEnter}\r\n    > \r\n      <span className=\"material-icons\">cancel</span>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * A game board made up of squares.\r\n */\r\nclass Board extends React.Component {\r\n  renderSquare(loc) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[loc]}\r\n        onMouseDown={(event) => this.props.onMouseDown(event, loc)}\r\n        onMouseEnter={() => this.props.onMouseEnter(loc)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const cols = [];\r\n    let loc = 0\r\n\r\n    for (let col = 0; col < this.props.dimensions.rows; col++) {\r\n      let temp = [];\r\n      for (let row = 0; row < this.props.dimensions.cols; row++) {\r\n        temp.push(this.renderSquare(loc++));\r\n      }\r\n      cols.push(temp);\r\n    }\r\n\r\n    const rows = [];\r\n    for (let row = 0; row < this.props.dimensions.rows; row++) {\r\n      rows.push(<div className=\"board-row\">{cols[row]}</div>);\r\n    }\r\n    return (\r\n      <div className=\"game-board\">\r\n        {rows}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * The main component that is called on by ReactDOM.render().\r\n */\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const size = DefaultDimensions.ROWS * DefaultDimensions.COLS;\r\n\r\n    this.state = {\r\n      /** Number of rows and columns in game board. */\r\n      dimensions: {\r\n        rows: DefaultDimensions.ROWS,\r\n        cols: DefaultDimensions.COLS,\r\n      },\r\n      /** Current board state. */\r\n      current: Array(size).fill(SquareValue.EMPTY),\r\n      /** History of board states. Initial board state will always be empty. */\r\n      history: [{\r\n        squares: Array(size).fill(SquareValue.EMPTY),\r\n      }],\r\n      /** Index of history that we're currently at. */\r\n      stepNumber: 0,\r\n      /** Current hint numbers. */\r\n      currentHints: new Hints(Array(DefaultDimensions.ROWS).fill([0]), Array(DefaultDimensions.COLS).fill([0])),\r\n      /** Goal hint numbers. */\r\n      goalHints: new Hints([], []),\r\n      /** Whether or not the left mouse button is currently held down. */\r\n      lMouseDown: false,\r\n      /** Whether or not the right mouse button is currently held down. */\r\n      rMouseDown: false,\r\n      /** Value of first square clicked. Reset when mouse button is let go. */\r\n      initialSquare: SquareValue.EMPTY,\r\n      /** Value we're currently changing squares to. Reset when mouse button is let go. */\r\n      currentAction: SquareValue.EMPTY,\r\n      /** Whether or not the board's current state has been changed since the last time we appended to history. */\r\n      changed: false,\r\n      /** The number of seconds that have elapsed since board initialization. */\r\n      seconds: 0,\r\n      /** A string timer keeping track of hours:minutes:seconds elapsed since board initialization. */\r\n      timer: \"00:00:00\",\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initially called by componentDidMount().\r\n   * \r\n   * Will be called once every 1,000 milliseconds (1 second)\r\n   * in order to update the in-game clock.\r\n   */\r\n  tick() {\r\n    this.setState(state => ({\r\n      seconds: state.seconds + 1,\r\n      timer: new Date(1000 * (this.state.seconds + 1)).toISOString().substr(11, 8)\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Called once on initial load.\r\n   */\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.tick(), 1000);\r\n    this.generateWinState();\r\n  }\r\n\r\n  /**\r\n   * Called when component is updated.\r\n   */\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (!this.state.goalHints.rows.length) {\r\n      this.generateWinState();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces a randomly generated win state for the game board.\r\n   * \r\n   * The hint numbers are what determine the win state rather than\r\n   * the actual board state because we're not necessarily generating\r\n   * win states with only one solution.\r\n   */\r\n  generateWinState() {\r\n    const size = this.state.dimensions.rows * this.state.dimensions.cols;\r\n    let winSquares = [];\r\n\r\n    for (let i = 0; i < size; i++) {\r\n      winSquares.push((Math.random() < 0.5) ? SquareValue.EMPTY : SquareValue.FILLED);\r\n    }\r\n    \r\n    this.setState({\r\n      goalHints: this.getHintNumbers(winSquares),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Compares current hint numbers to goal hint numbers to see\r\n   * if they match. If they match, the player has won.\r\n   * \r\n   * @returns {Boolean} Whether or not the player has won.\r\n   */\r\n  winCheck() {\r\n    if (!this.state.currentHints.rows.length) return false;\r\n\r\n    // Compare row hint numbers.\r\n    for (let a = 0; a < this.state.goalHints.rows.length; a++) {\r\n      if (this.state.goalHints.rows[a].length !== this.state.currentHints.rows[a].length) return false;\r\n      for (let b = 0; b < this.state.goalHints.rows[a].length; b++) {\r\n        if (this.state.goalHints.rows[a][b] !== this.state.currentHints.rows[a][b]) return false;\r\n      }\r\n    }\r\n\r\n    // Compare column hint numbers.\r\n    for (let a = 0; a < this.state.goalHints.cols.length; a++) {\r\n      if (this.state.goalHints.cols[a].length !== this.state.currentHints.cols[a].length) return false;\r\n      for (let b = 0; b < this.state.goalHints.cols[a].length; b++) {\r\n        if (this.state.goalHints.cols[a][b] !== this.state.currentHints.cols[a][b]) return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Retrieve square index in 1-D array using the\r\n   * [row][column] indices one would expect from a 2-D array.\r\n   * \r\n   * @param {Number} row Row that square is located.\r\n   * @param {Number} col Column that square is located.\r\n   */\r\n  getSquareIndex(row, col) {\r\n    return col + (this.state.dimensions.cols * row);\r\n  }\r\n\r\n  /**\r\n   * Append current board state to history of board states.\r\n   * \r\n   * Should be called whenever we finish changing square values.\r\n   * \r\n   * At the moment, this is called whenever we let go of a mouse button.\r\n   * This means we can capture multiple square value changes in a single\r\n   * append as long as the mouse button is held down and the cursor is\r\n   * dragged over multiple squares.\r\n   */\r\n  appendHistory() {\r\n    if (!this.state.changed) return;\r\n\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = this.state.current;\r\n\r\n    if (current !== history[history.length - 1].squares) {\r\n      this.setState({\r\n        history: history.concat([\r\n          {\r\n            squares: current,\r\n          }\r\n        ]),\r\n        stepNumber: history.length,\r\n        changed: false,\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      currentHints: this.getHintNumbers(this.state.current),\r\n      lMouseDown: false,\r\n      rMouseDown: false,\r\n      initialSquare: SquareValue.EMPTY,\r\n      currentAction: SquareValue.EMPTY,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deal with square click interaction.\r\n   * \r\n   * Should be called when user mouse cursor is hovering over\r\n   * a square on the game board and a mouse button is pressed down.\r\n   * \r\n   * Will alter the value of that square, and initiate the process\r\n   * of potentially holding the mouse button down and dragging over\r\n   * other squares in order to also alter their values.\r\n   * \r\n   * @param {MouseEvent} event Mouse event for determining which mouse button was pressed.\r\n   * @param {Number} loc Index of the square being clicked.\r\n   */\r\n  squareClick(event, loc) {\r\n    const current = this.state.current;\r\n    const squares = current.slice();\r\n    let lMouseDown = this.state.lMouseDown;\r\n    let rMouseDown = this.state.rMouseDown;\r\n    let initialSquare = squares[loc];\r\n    let currentAction = this.state.currentAction;\r\n    let changed = this.state.changed;\r\n\r\n    if (event.button === 0) {\r\n      if (event.type === \"mousedown\") {\r\n        lMouseDown = true;\r\n        currentAction = (initialSquare === SquareValue.EMPTY) ? SquareValue.FILLED : SquareValue.EMPTY;\r\n        squares[loc] = currentAction;\r\n        changed = true;\r\n      }\r\n    } else if (event.button === 2) {\r\n      if (event.type === \"mousedown\") {\r\n        rMouseDown = true;\r\n        currentAction = (initialSquare === SquareValue.EMPTY) ? SquareValue.MARKED : SquareValue.EMPTY;\r\n        squares[loc] = currentAction;\r\n        changed = true;\r\n      }\r\n    } else {\r\n      return;\r\n    }\r\n    this.setState({\r\n      current: squares,\r\n      lMouseDown: lMouseDown,\r\n      rMouseDown: rMouseDown,\r\n      initialSquare: initialSquare,\r\n      currentAction: currentAction,\r\n      changed: changed,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deal with square hover interaction.\r\n   * \r\n   * Should be called when user mouse cursor is hovering over\r\n   * a square on the game board.\r\n   * \r\n   * Will check if a mouse button is being held down,\r\n   * and if one is, the square's value may be altered.\r\n   * \r\n   * @param {Number} loc Index of the square being hovered over.\r\n   */\r\n  squareHover(loc) {\r\n    let lMouseDown = this.state.lMouseDown;\r\n    let rMouseDown = this.state.rMouseDown;\r\n    let changed = this.state.changed;\r\n    \r\n    if (!lMouseDown && !rMouseDown) return;\r\n\r\n    const current = this.state.current;\r\n    const squares = current.slice();\r\n    let initialSquare = this.state.initialSquare;\r\n    let currentAction = this.state.currentAction;\r\n\r\n    if (initialSquare === squares[loc]) {\r\n      squares[loc] = currentAction;\r\n      changed = true;\r\n    } else {\r\n      return;\r\n    }\r\n    \r\n    this.setState({\r\n      current: squares,\r\n      changed: changed,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieve row and column hint numbers and return them.\r\n   * \r\n   * @return {Hints} Return Hints object containing two arrays (rows[], cols[]).\r\n   */\r\n  getHintNumbers(squares) {\r\n    const dimensions = this.state.dimensions;\r\n    const hintNumbers = new Hints([], []);\r\n\r\n    // Find row hint numbers.\r\n    for (let row = 0; row < dimensions.rows; row++) {\r\n      let rowHints = [];\r\n      let num = 0;\r\n\r\n      for ( let col = 0; col < dimensions.cols; col++) {\r\n        if (squares[this.getSquareIndex(row, col)] === SquareValue.FILLED) num++;\r\n        else if (num) {\r\n          rowHints.push(num);\r\n          num = 0;\r\n        }\r\n      }\r\n      if (num || !rowHints.length) rowHints.push(num);\r\n      hintNumbers.rows.push(rowHints);\r\n    }\r\n\r\n    // Find column hint numbers.\r\n    for (let col = 0; col < dimensions.cols; col++) {\r\n      let colHints = [];\r\n      let num = 0;\r\n\r\n      for ( let row = 0; row < dimensions.rows; row++) {\r\n        if (squares[this.getSquareIndex(row, col)] === SquareValue.FILLED) num++;\r\n        else if (num) {\r\n          colHints.push(num);\r\n          num = 0;\r\n        }\r\n      }\r\n      if (num || !colHints.length) colHints.push(num);\r\n      hintNumbers.cols.push(colHints);\r\n    }\r\n\r\n    return hintNumbers;\r\n  }\r\n\r\n  /**\r\n   * Jump to a particular point in the history of actions.\r\n   * If the step doesn't exist in the history as an index, do nothing.\r\n   * \r\n   * @param {Number} step The index of the action state to jump to.\r\n   */\r\n  jumpTo(step) {\r\n    if (step < 0 || step >= this.state.history.length) return;\r\n\r\n    this.setState({\r\n      current: this.state.history[step].squares,\r\n      stepNumber: step,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Undo the most recent action.\r\n   * If there is no action to undo, do nothing.\r\n   * \r\n   * As soon as we commit a new action, we cut off any actions\r\n   * in front of the current action in the action history.\r\n   */\r\n  undoAction() {\r\n    const stepNumber = this.state.stepNumber;\r\n\r\n    if (!stepNumber) return;\r\n\r\n    this.setState({\r\n      current: this.state.history[stepNumber - 1].squares,\r\n      stepNumber: stepNumber - 1,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Redo an undo.\r\n   * If any actions have been undone by the undoAction()\r\n   * function, we can redo them with this function.\r\n   * \r\n   * As soon as we commit a new action, we cut off any actions\r\n   * in front of the current action in the action history.\r\n   */\r\n  redoAction() {\r\n    const stepNumber = this.state.stepNumber;\r\n\r\n    if (stepNumber === this.state.history.length - 1) return;\r\n\r\n    this.setState({\r\n      current: this.state.history[stepNumber + 1].squares,\r\n      stepNumber: stepNumber + 1,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restart with a new game board.\r\n   */\r\n  restart() {\r\n    let sel = document.getElementById('dimensions-select');\r\n    const index = sel.selectedIndex;\r\n    const nextDimensions = {\r\n      rows: DimensionsChoices[index][1],\r\n      cols: DimensionsChoices[index][0]\r\n    }\r\n    const size = nextDimensions.rows * nextDimensions.cols;\r\n\r\n    this.setState({\r\n      dimensions: nextDimensions,\r\n      current: Array(size).fill(SquareValue.EMPTY),\r\n      history: [{\r\n        squares: Array(size).fill(SquareValue.EMPTY),\r\n      }],\r\n      stepNumber: 0,\r\n      currentHints: new Hints(Array(nextDimensions.rows).fill([0]), Array(nextDimensions.cols).fill([0])),\r\n      goalHints: new Hints([], []),\r\n      lMouseDown: false,\r\n      rMouseDown: false,\r\n      initialSquare: SquareValue.EMPTY,\r\n      currentAction: SquareValue.EMPTY,\r\n      changed: false,\r\n      seconds: 0,\r\n      timer: \"00:00:00\",\r\n    });\r\n  }\r\n\r\n  render() {\r\n    /*\r\n    const history = this.state.history;\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ?\r\n        'Go to move #' + move :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n    */\r\n\r\n   const current = this.state.current;\r\n\r\n    return (\r\n      <div\r\n        className=\"game\"\r\n        onContextMenu={(e)=> e.preventDefault()}\r\n        onMouseUp={() => this.appendHistory()}\r\n      >\r\n        <div className=\"left-panel\">\r\n          <div className=\"game-info\">\r\n            <div>{this.state.timer}</div>\r\n            <div>{(this.winCheck()) ? 'You won!' : ''}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"right-panel\">\r\n          <div className=\"upper-board\">\r\n            <HintNumbers\r\n              currentHints={this.state.currentHints.cols}\r\n              goalHints={this.state.goalHints.cols}\r\n              area='upper'\r\n              type='col'\r\n            />\r\n          </div>\r\n          <div className=\"lower-board\">\r\n            <HintNumbers\r\n              currentHints={this.state.currentHints.rows}\r\n              goalHints={this.state.goalHints.rows}\r\n              area='left'\r\n              type='row'\r\n            />\r\n            <Board\r\n              squares={current}\r\n              dimensions={this.state.dimensions}\r\n              onMouseDown={(event, loc) => this.squareClick(event, loc)}\r\n              onMouseEnter={loc => this.squareHover(loc)}\r\n            />\r\n          </div>\r\n          <div className=\"undo-redo\">\r\n            <span className=\"material-icons\" onClick={() => this.undoAction()}>undo</span>\r\n            <span className=\"material-icons\" onClick={() => this.redoAction()}>redo</span>\r\n            <span className=\"material-icons\" onClick={() => this.restart()}>replay</span>\r\n            <DimensionChoices/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Game from './components/game'\r\nimport \"./index.css\";\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('app'),\r\n);"],"sourceRoot":""}