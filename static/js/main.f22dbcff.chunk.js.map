{"version":3,"sources":["App.js","nonogramBoard.js","serviceWorker.js","index.js"],"names":["App","React","Component","props","handleClick","event","button","type","setState","message","state","seconds","timer","this","Date","toISOString","substr","interval","setInterval","tick","onContextMenu","e","preventDefault","className","onMouseDown","onMouseUp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8PAuDeA,GCpDaC,IAAMC,U,kBDEhC,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAmBRC,YAAc,SAACC,GACQ,IAAjBA,EAAMC,OACW,cAAfD,EAAME,KACR,EAAKC,SAAS,CAAEC,QAAS,oBACD,YAAfJ,EAAME,MACf,EAAKC,SAAS,CAAEC,QAAS,kBAED,IAAjBJ,EAAMC,SACI,cAAfD,EAAME,KACR,EAAKC,SAAS,CAAEC,QAAS,qBACD,YAAfJ,EAAME,MACf,EAAKC,SAAS,CAAEC,QAAS,qBA7B7B,EAAKC,MAAQ,CACXD,QAAS,cACTE,QAAS,EACTC,MAAO,YALQ,E,oEASX,IAAD,OACLC,KAAKL,UAAS,SAAAE,GAAK,MAAK,CACtBC,QAASD,EAAMC,QAAU,EACzBC,MAAO,IAAIE,KAAK,IAAO,EAAKJ,MAAMC,SAASI,cAAcC,OAAO,GAAI,S,0CAInD,IAAD,OAClBH,KAAKI,SAAWC,aAAY,kBAAM,EAAKC,SAAQ,O,+BAoB/C,OACE,yBAAKC,cAAe,SAACC,GAAD,OAAMA,EAAEC,mBAC1B,yBAAKC,UAAU,aAAaC,YAAcX,KAAKT,YAAcqB,UAAYZ,KAAKT,aACxES,KAAKH,MAAMD,QACb,6BACII,KAAKH,MAAME,a,GA3CTX,IAAMC,YEQJwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMjC,a","file":"static/js/main.f22dbcff.chunk.js","sourcesContent":["import React from 'react';\nimport NonogramBoard from './nonogramBoard';\nimport './App.css';\n \nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"Mouse Event\",\n      seconds: 0,\n      timer: \"00:00:00\",\n    }\n  }\n\n  tick() {\n    this.setState(state => ({\n      seconds: state.seconds + 1,\n      timer: new Date(1000 * this.state.seconds).toISOString().substr(11, 8)\n    }))\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n \n  handleClick = (event) => {\n    if (event.button === 0) {\n      if (event.type === \"mousedown\") {\n        this.setState({ message: \"Left Mouse Down\"});\n      } else if (event.type === \"mouseup\") {\n        this.setState({ message: \"Left Mouse Up\"});\n      }\n    } else if (event.button === 2) {\n      if (event.type === \"mousedown\") {\n        this.setState({ message: \"Right Mouse Down\"});\n      } else if (event.type === \"mouseup\") {\n        this.setState({ message: \"Right Mouse Up\"});\n      }\n    }\n  }\n \n  render() {\n    return (\n      <div onContextMenu={(e)=> e.preventDefault()}>\n        <div className=\"App-header\" onMouseDown={ this.handleClick } onMouseUp={ this.handleClick }>\n            { this.state.message }\n            <div>\n              { this.state.timer }\n            </div>\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default App;\n","import React from 'react';\r\nimport App from './App';\r\n \r\nclass NonogramBoard extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      message: \"Mouse Event\"\r\n    }\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n \r\n  handleClick = (event) => {\r\n    if (event.button === 0) {\r\n      if (event.type === \"mousedown\") {\r\n        this.setState({ message: \"Left Mouse Down\"});\r\n      } else if (event.type === \"mouseup\") {\r\n        this.setState({ message: \"Left Mouse Up\"});\r\n      }\r\n    } else if (event.button === 2) {\r\n      if (event.type === \"mousedown\") {\r\n        this.setState({ message: \"Right Mouse Down\"});\r\n      } else if (event.type === \"mouseup\") {\r\n        this.setState({ message: \"Right Mouse Up\"});\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n      return (\r\n        <App\r\n            message={this.message}\r\n        />\r\n      );\r\n  }\r\n}\r\n \r\nexport default NonogramBoard;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}