{"version":3,"sources":["components/common/constants.js","components/game/index.js","index.js"],"names":["DefaultDimensions","SquareValue","EMPTY","FILLED","MARKED","properties","1","name","2","3","DimensionsChoices","DimensionChoices","choices","i","length","push","id","HintNumbers","props","hintNumbers","a","values","aSection","b","className","type","area","Square","index","value","onMouseDown","onMouseEnter","Board","loc","this","squares","event","cols","col","dimensions","rows","temp","row","renderSquare","React","Component","Game","size","state","current","Array","fill","history","stepNumber","goalHints","lMouseDown","rMouseDown","initialSquare","currentAction","changed","seconds","timer","setState","Date","toISOString","substr","interval","setInterval","tick","generateWinState","prevProps","prevState","winSquares","Math","random","getHintNumbers","currentHints","slice","concat","button","rowHints","num","getSquareIndex","colHints","step","document","getElementById","selectedIndex","nextDimensions","onContextMenu","e","preventDefault","onMouseUp","appendHistory","winCheck","squareClick","squareHover","onClick","undoAction","redoAction","restart","ReactDOM","render"],"mappings":"+OAAWA,EACH,EADGA,EAEH,EAGGC,EAAc,CACvBC,MAAO,EACPC,OAAQ,EACRC,OAAQ,EACRC,WAAY,CACVC,EAAG,CAACC,KAAM,SACVC,EAAG,CAACD,KAAM,UACVE,EAAG,CAACF,KAAM,YAIHG,EAAoB,CAC7B,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,K,MCjBP,SAASC,IAGP,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIH,EAAkBI,OAAQD,IAC5CD,EAAQG,KAAK,gCAASL,EAAkBG,GAAG,GAAK,IAAMH,EAAkBG,GAAG,KAG7E,OACE,4BAAQG,GAAG,qBACRJ,GAUP,SAASK,EAAYC,GAGnB,IAFA,IAAIC,EAAc,GAETC,EAAI,EAAGA,EAAIF,EAAMG,OAAOP,OAAQM,IAAK,CAG5C,IAFA,IAAIE,EAAW,GAENC,EAAI,EAAGA,EAAIL,EAAMG,OAAOD,GAAGN,OAAQS,IAC1CD,EAASP,KAAK,yBAAKS,UAAU,QAAQN,EAAMG,OAAOD,GAAGG,KAGvDJ,EAAYJ,KAAK,yBAAKS,UAAW,QAAUN,EAAMO,MAAOH,IAG1D,OACE,yBAAKE,UAAWN,EAAMQ,KAAO,UAC1BP,GAUP,SAASQ,EAAOT,GACd,IAAMU,EAAgC,qBAAhBV,EAAMW,MAAyB,EAAIX,EAAMW,MACzDA,EAAQ5B,EAAYI,WAAWuB,GAAOrB,KAE5C,OACE,yBACEiB,UAAW,iBAAmBK,EAC9BC,YAAaZ,EAAMY,YACnBC,aAAcb,EAAMa,cAEpB,0BAAMP,UAAU,kBAAhB,W,IAQAQ,E,qLACSC,GAAM,IAAD,OAChB,OACE,kBAACN,EAAD,CACEE,MAAOK,KAAKhB,MAAMiB,QAAQF,GAC1BH,YAAa,SAACM,GAAD,OAAW,EAAKlB,MAAMY,YAAYM,EAAOH,IACtDF,aAAc,kBAAM,EAAKb,MAAMa,aAAaE,Q,+BAShD,IAHA,IAAMI,EAAO,GACTJ,EAAM,EAEDK,EAAM,EAAGA,EAAMJ,KAAKhB,MAAMqB,WAAWC,KAAMF,IAAO,CAEzD,IADA,IAAIG,EAAO,GACFC,EAAM,EAAGA,EAAMR,KAAKhB,MAAMqB,WAAWF,KAAMK,IAClDD,EAAK1B,KAAKmB,KAAKS,aAAaV,MAE9BI,EAAKtB,KAAK0B,GAIZ,IADA,IAAMD,EAAO,GACJE,EAAM,EAAGA,EAAMR,KAAKhB,MAAMqB,WAAWC,KAAME,IAClDF,EAAKzB,KAAK,yBAAKS,UAAU,aAAaa,EAAKK,KAE7C,OACE,yBAAKlB,UAAU,cACZgB,O,GA7BWI,IAAMC,WAmeXC,E,YA5bb,WAAY5B,GAAQ,IAAD,sBACjB,4CAAMA,IACN,IAAM6B,EAAO/C,EAAyBA,EAFrB,OAIjB,EAAKgD,MAAQ,CAEXT,WAAY,CACVC,KAAMxC,EACNqC,KAAMrC,GAGRiD,QAASC,MAAMH,GAAMI,KAAKlD,EAAYC,OAEtCkD,QAAS,CAAC,CACRjB,QAASe,MAAMH,GAAMI,KAAKlD,EAAYC,SAGxCmD,WAAY,EAEZC,UAAW,CACTd,KAAM,GACNH,KAAM,IAGRkB,YAAY,EAEZC,YAAY,EAEZC,cAAexD,EAAYC,MAE3BwD,cAAezD,EAAYC,MAE3ByD,SAAS,EAETC,QAAS,EAETC,MAAO,YApCQ,E,oEA8CX,IAAD,OACL3B,KAAK4B,UAAS,SAAAd,GAAK,MAAK,CACtBY,QAASZ,EAAMY,QAAU,EACzBC,MAAO,IAAIE,KAAK,KAAQ,EAAKf,MAAMY,QAAU,IAAII,cAAcC,OAAO,GAAI,S,0CAOzD,IAAD,OAClB/B,KAAKgC,SAAWC,aAAY,kBAAM,EAAKC,SAAQ,KAC/ClC,KAAKmC,qB,yCAMYC,EAAWC,GACvBrC,KAAKc,MAAMM,UAAUd,KAAK1B,QAC7BoB,KAAKmC,qB,yCAeP,IAHA,IAAMtB,EAAOb,KAAKc,MAAMT,WAAWC,KAAON,KAAKc,MAAMT,WAAWF,KAC5DmC,EAAa,GAER3D,EAAI,EAAGA,EAAIkC,EAAMlC,IACxB2D,EAAWzD,KAAM0D,KAAKC,SAAW,GAAOzE,EAAYC,MAAQD,EAAYE,QAG1E+B,KAAK4B,SAAS,CACZR,UAAWpB,KAAKyC,eAAeH,O,iCAcjC,IAHA,IAAMI,EAAe1C,KAAKyC,eAAezC,KAAKc,MAAMC,SAG3C7B,EAAI,EAAGA,EAAIc,KAAKc,MAAMM,UAAUd,KAAK1B,OAAQM,IAAK,CACzD,GAAIc,KAAKc,MAAMM,UAAUd,KAAKpB,GAAGN,QAAU8D,EAAapC,KAAKpB,GAAGN,OAAQ,OAAO,EAC/E,IAAK,IAAIS,EAAI,EAAGA,EAAIW,KAAKc,MAAMM,UAAUd,KAAKpB,GAAGN,OAAQS,IACvD,GAAIW,KAAKc,MAAMM,UAAUd,KAAKpB,GAAGG,KAAOqD,EAAapC,KAAKpB,GAAGG,GAAI,OAAO,EAK5E,IAAK,IAAIH,EAAI,EAAGA,EAAIc,KAAKc,MAAMM,UAAUjB,KAAKvB,OAAQM,IAAK,CACzD,GAAIc,KAAKc,MAAMM,UAAUjB,KAAKjB,GAAGN,QAAU8D,EAAavC,KAAKjB,GAAGN,OAAQ,OAAO,EAC/E,IAAK,IAAIS,EAAI,EAAGA,EAAIW,KAAKc,MAAMM,UAAUjB,KAAKjB,GAAGN,OAAQS,IACvD,GAAIW,KAAKc,MAAMM,UAAUjB,KAAKjB,GAAGG,KAAOqD,EAAavC,KAAKjB,GAAGG,GAAI,OAAO,EAI5E,OAAO,I,qCAUMmB,EAAKJ,GAClB,OAAOA,EAAOJ,KAAKc,MAAMT,WAAWF,KAAOK,I,sCAc3C,GAAKR,KAAKc,MAAMW,QAAhB,CAEA,IAAMP,EAAUlB,KAAKc,MAAMI,QAAQyB,MAAM,EAAG3C,KAAKc,MAAMK,WAAa,GAC9DJ,EAAUf,KAAKc,MAAMC,QAEvBA,IAAYG,EAAQA,EAAQtC,OAAS,GAAGqB,SAC1CD,KAAK4B,SAAS,CACZV,QAASA,EAAQ0B,OAAO,CACtB,CACE3C,QAASc,KAGbI,WAAYD,EAAQtC,OACpB6C,SAAS,IAIbzB,KAAK4B,SAAS,CACZP,YAAY,EACZC,YAAY,EACZC,cAAexD,EAAYC,MAC3BwD,cAAezD,EAAYC,W,kCAiBnBkC,EAAOH,GACjB,IACME,EADUD,KAAKc,MAAMC,QACH4B,QACpBtB,EAAarB,KAAKc,MAAMO,WACxBC,EAAatB,KAAKc,MAAMQ,WACxBC,EAAgBtB,EAAQF,GACxByB,EAAgBxB,KAAKc,MAAMU,cAC3BC,EAAUzB,KAAKc,MAAMW,QAEzB,GAAqB,IAAjBvB,EAAM2C,OACW,cAAf3C,EAAMX,OACR8B,GAAa,EACbG,EAAiBD,IAAkBxD,EAAYC,MAASD,EAAYE,OAASF,EAAYC,MACzFiC,EAAQF,GAAOyB,EACfC,GAAU,OAEP,IAAqB,IAAjBvB,EAAM2C,OAQf,OAPmB,cAAf3C,EAAMX,OACR+B,GAAa,EACbE,EAAiBD,IAAkBxD,EAAYC,MAASD,EAAYG,OAASH,EAAYC,MACzFiC,EAAQF,GAAOyB,EACfC,GAAU,GAKdzB,KAAK4B,SAAS,CACZb,QAASd,EACToB,WAAYA,EACZC,WAAYA,EACZC,cAAeA,EACfC,cAAeA,EACfC,QAASA,M,kCAeD1B,GACV,IAAIsB,EAAarB,KAAKc,MAAMO,WACxBC,EAAatB,KAAKc,MAAMQ,WACxBG,EAAUzB,KAAKc,MAAMW,QAEzB,GAAKJ,GAAeC,EAApB,CAEA,IACMrB,EADUD,KAAKc,MAAMC,QACH4B,QACpBpB,EAAgBvB,KAAKc,MAAMS,cAC3BC,EAAgBxB,KAAKc,MAAMU,cAE3BD,IAAkBtB,EAAQF,KAC5BE,EAAQF,GAAOyB,EACfC,GAAU,EAKZzB,KAAK4B,SAAS,CACZb,QAASd,EACTwB,QAASA,Q,qCASExB,GAQb,IAPA,IAAMI,EAAaL,KAAKc,MAAMT,WACxBpB,EAAc,CAClBqB,KAAM,GACNH,KAAM,IAICK,EAAM,EAAGA,EAAMH,EAAWC,KAAME,IAAO,CAI9C,IAHA,IAAIsC,EAAW,GACXC,EAAM,EAEA3C,EAAM,EAAGA,EAAMC,EAAWF,KAAMC,IACpCH,EAAQD,KAAKgD,eAAexC,EAAKJ,MAAUrC,EAAYE,OAAQ8E,IAC1DA,IACPD,EAASjE,KAAKkE,GACdA,EAAM,IAGNA,GAAQD,EAASlE,QAAQkE,EAASjE,KAAKkE,GAC3C9D,EAAYqB,KAAKzB,KAAKiE,GAIxB,IAAK,IAAI1C,EAAM,EAAGA,EAAMC,EAAWF,KAAMC,IAAO,CAI9C,IAHA,IAAI6C,EAAW,GACXF,EAAM,EAEAvC,EAAM,EAAGA,EAAMH,EAAWC,KAAME,IACpCP,EAAQD,KAAKgD,eAAexC,EAAKJ,MAAUrC,EAAYE,OAAQ8E,IAC1DA,IACPE,EAASpE,KAAKkE,GACdA,EAAM,IAGNA,GAAQE,EAASrE,QAAQqE,EAASpE,KAAKkE,GAC3C9D,EAAYkB,KAAKtB,KAAKoE,GAGxB,OAAOhE,I,6BASFiE,GACDA,EAAO,GAAKA,GAAQlD,KAAKc,MAAMI,QAAQtC,QAE3CoB,KAAK4B,SAAS,CACZb,QAASf,KAAKc,MAAMI,QAAQgC,GAAMjD,QAClCkB,WAAY+B,M,mCAYd,IAAM/B,EAAanB,KAAKc,MAAMK,WAEzBA,GAELnB,KAAK4B,SAAS,CACZb,QAASf,KAAKc,MAAMI,QAAQC,EAAa,GAAGlB,QAC5CkB,WAAYA,EAAa,M,mCAa3B,IAAMA,EAAanB,KAAKc,MAAMK,WAE1BA,IAAenB,KAAKc,MAAMI,QAAQtC,OAAS,GAE/CoB,KAAK4B,SAAS,CACZb,QAASf,KAAKc,MAAMI,QAAQC,EAAa,GAAGlB,QAC5CkB,WAAYA,EAAa,M,gCAQ3B,IACMzB,EADIyD,SAASC,eAAe,qBAChBC,cACZC,EAAiB,CACrBhD,KAAM9B,EAAkBkB,GAAO,GAC/BS,KAAM3B,EAAkBkB,GAAO,IAE3BmB,EAAOyC,EAAehD,KAAOgD,EAAenD,KAElDH,KAAK4B,SAAS,CACZvB,WAAYiD,EACZvC,QAASC,MAAMH,GAAMI,KAAKlD,EAAYC,OACtCkD,QAAS,CAAC,CACRjB,QAASe,MAAMH,GAAMI,KAAKlD,EAAYC,SAExCmD,WAAY,EACZC,UAAW,CACTd,KAAM,GACNH,KAAM,IAERkB,YAAY,EACZC,YAAY,EACZC,cAAexD,EAAYC,MAC3BwD,cAAezD,EAAYC,MAC3ByD,SAAS,EACTC,QAAS,EACTC,MAAO,e,+BAID,IAAD,OAeFZ,EAAUf,KAAKc,MAAMC,QAE1B,OACE,yBACEzB,UAAU,OACViE,cAAe,SAACC,GAAD,OAAMA,EAAEC,kBACvBC,UAAW,kBAAM,EAAKC,kBAEtB,yBAAKrE,UAAU,cACb,yBAAKA,UAAU,aACb,6BAAMU,KAAKc,MAAMa,OACjB,6BAAO3B,KAAK4D,WAAc,WAAa,MAG3C,yBAAKtE,UAAU,eACb,yBAAKA,UAAU,eACb,kBAACP,EAAD,CACEI,OAAQa,KAAKc,MAAMM,UAAUjB,KAC7BX,KAAK,QACLD,KAAK,SAGT,yBAAKD,UAAU,eACb,kBAACP,EAAD,CACEI,OAAQa,KAAKc,MAAMM,UAAUd,KAC7Bd,KAAK,OACLD,KAAK,QAEP,kBAAC,EAAD,CACEU,QAASc,EACTV,WAAYL,KAAKc,MAAMT,WACvBT,YAAa,SAACM,EAAOH,GAAR,OAAgB,EAAK8D,YAAY3D,EAAOH,IACrDF,aAAc,SAAAE,GAAG,OAAI,EAAK+D,YAAY/D,OAG1C,yBAAKT,UAAU,aACb,0BAAMA,UAAU,iBAAiByE,QAAS,kBAAM,EAAKC,eAArD,QACA,0BAAM1E,UAAU,iBAAiByE,QAAS,kBAAM,EAAKE,eAArD,QACA,0BAAM3E,UAAU,iBAAiByE,QAAS,kBAAM,EAAKG,YAArD,UACA,kBAACzF,EAAD,a,GArbOiC,IAAMC,W,MCtGzBwD,IAASC,OACP,kBAAC,EAAD,MACAjB,SAASC,eAAe,S","file":"static/js/main.3a152a37.chunk.js","sourcesContent":["export var DefaultDimensions = {\r\n  ROWS: 5,\r\n  COLS: 5,\r\n};\r\n\r\nexport var SquareValue = {\r\n  EMPTY: 1,\r\n  FILLED: 2,\r\n  MARKED: 3,\r\n  properties: {\r\n    1: {name: \"empty\"},\r\n    2: {name: \"filled\"},\r\n    3: {name: \"marked\"}\r\n  }\r\n};\r\n\r\nexport var DimensionsChoices = [\r\n  [5, 5],\r\n  [10, 5],\r\n  [10, 10],\r\n  [15, 10],\r\n  [15, 15],\r\n  [20, 15],\r\n  [20, 20],\r\n  [25, 20],\r\n  [25, 25],\r\n  [30, 25],\r\n  [30, 30],\r\n];","import React from \"react\";\r\nimport { DefaultDimensions, SquareValue, DimensionsChoices } from \"../common/constants.js\";\r\nimport \"./index.css\";\r\n\r\n/**\r\n * Produces a dropdown selection box for user to select the dimensions\r\n * of the game board when it's reset next.\r\n * \r\n * These choices are pulled from ../common/constants.js.\r\n */\r\nfunction DimensionChoices() {\r\n  let choices = [];\r\n\r\n  for (let i = 0; i < DimensionsChoices.length; i++) {\r\n    choices.push(<option>{DimensionsChoices[i][0] + \"x\" + DimensionsChoices[i][1]}</option>)\r\n  }\r\n\r\n  return (\r\n    <select id=\"dimensions-select\">\r\n      {choices}\r\n    </select>\r\n  )\r\n}\r\n\r\n/**\r\n * Translates either row or column hint numbers into HTML div elements.\r\n * \r\n * @param {*} props \r\n */\r\nfunction HintNumbers(props) {\r\n  let hintNumbers = [];\r\n\r\n  for (let a = 0; a < props.values.length; a++) {\r\n    let aSection = [];\r\n\r\n    for (let b = 0; b < props.values[a].length; b++) {\r\n      aSection.push(<div className=\"hint\">{props.values[a][b]}</div>);\r\n    }\r\n\r\n    hintNumbers.push(<div className={\"hint-\" + props.type}>{aSection}</div>);\r\n  }\r\n\r\n  return (\r\n    <div className={props.area + '-hints'}>\r\n      {hintNumbers}\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Translates individual board squares into HTML div elements.\r\n * \r\n * @param {*} props \r\n */\r\nfunction Square(props) {\r\n  const index = (typeof props.value === 'undefined') ? 1 : props.value;\r\n  const value = SquareValue.properties[index].name;\r\n\r\n  return (\r\n    <div\r\n      className={'square square-' + value}\r\n      onMouseDown={props.onMouseDown}\r\n      onMouseEnter={props.onMouseEnter}\r\n    > \r\n      <span className=\"material-icons\">cancel</span>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * A game board made up of squares.\r\n */\r\nclass Board extends React.Component {\r\n  renderSquare(loc) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[loc]}\r\n        onMouseDown={(event) => this.props.onMouseDown(event, loc)}\r\n        onMouseEnter={() => this.props.onMouseEnter(loc)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const cols = [];\r\n    let loc = 0\r\n\r\n    for (let col = 0; col < this.props.dimensions.rows; col++) {\r\n      let temp = [];\r\n      for (let row = 0; row < this.props.dimensions.cols; row++) {\r\n        temp.push(this.renderSquare(loc++));\r\n      }\r\n      cols.push(temp);\r\n    }\r\n\r\n    const rows = [];\r\n    for (let row = 0; row < this.props.dimensions.rows; row++) {\r\n      rows.push(<div className=\"board-row\">{cols[row]}</div>);\r\n    }\r\n    return (\r\n      <div className=\"game-board\">\r\n        {rows}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * The main component that is called on by ReactDOM.render().\r\n */\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const size = DefaultDimensions.ROWS * DefaultDimensions.COLS;\r\n\r\n    this.state = {\r\n      /** Number of rows and columns in game board. */\r\n      dimensions: {\r\n        rows: DefaultDimensions.ROWS,\r\n        cols: DefaultDimensions.COLS,\r\n      },\r\n      /** Current board state. */\r\n      current: Array(size).fill(SquareValue.EMPTY),\r\n      /** History of board states. Initial board state will always be empty. */\r\n      history: [{\r\n        squares: Array(size).fill(SquareValue.EMPTY),\r\n      }],\r\n      /** Index of history that we're currently at. */\r\n      stepNumber: 0,\r\n      /** Goal hint numbers. */\r\n      goalHints: {\r\n        rows: [],\r\n        cols: [],\r\n      },\r\n      /** Whether or not the left mouse button is currently held down. */\r\n      lMouseDown: false,\r\n      /** Whether or not the right mouse button is currently held down. */\r\n      rMouseDown: false,\r\n      /** Value of first square clicked. Reset when mouse button is let go. */\r\n      initialSquare: SquareValue.EMPTY,\r\n      /** Value we're currently changing squares to. Reset when mouse button is let go. */\r\n      currentAction: SquareValue.EMPTY,\r\n      /** Whether or not the board's current state has been changed since the last time we appended to history. */\r\n      changed: false,\r\n      /** The number of seconds that have elapsed since board initialization. */\r\n      seconds: 0,\r\n      /** A string timer keeping track of hours:minutes:seconds elapsed since board initialization. */\r\n      timer: \"00:00:00\",\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initially called by componentDidMount().\r\n   * \r\n   * Will be called once every 1,000 milliseconds (1 second)\r\n   * in order to update the in-game clock.\r\n   */\r\n  tick() {\r\n    this.setState(state => ({\r\n      seconds: state.seconds + 1,\r\n      timer: new Date(1000 * (this.state.seconds + 1)).toISOString().substr(11, 8)\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Called once on initial load.\r\n   */\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.tick(), 1000);\r\n    this.generateWinState();\r\n  }\r\n\r\n  /**\r\n   * Called when component is updated.\r\n   */\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (!this.state.goalHints.rows.length) {\r\n      this.generateWinState();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces a randomly generated win state for the game board.\r\n   * \r\n   * The hint numbers are what determine the win state rather than\r\n   * the actual board state because we're not necessarily generating\r\n   * win states with only one solution.\r\n   */\r\n  generateWinState() {\r\n    const size = this.state.dimensions.rows * this.state.dimensions.cols;\r\n    let winSquares = [];\r\n\r\n    for (let i = 0; i < size; i++) {\r\n      winSquares.push((Math.random() < 0.5) ? SquareValue.EMPTY : SquareValue.FILLED);\r\n    }\r\n    \r\n    this.setState({\r\n      goalHints: this.getHintNumbers(winSquares),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Compares current hint numbers to goal hint numbers to see\r\n   * if they match. If they match, the player has won.\r\n   * \r\n   * @returns {Boolean} Whether or not the player has won.\r\n   */\r\n  winCheck() {\r\n    const currentHints = this.getHintNumbers(this.state.current);\r\n\r\n    // Compare row hint numbers.\r\n    for (let a = 0; a < this.state.goalHints.rows.length; a++) {\r\n      if (this.state.goalHints.rows[a].length != currentHints.rows[a].length) return false;\r\n      for (let b = 0; b < this.state.goalHints.rows[a].length; b++) {\r\n        if (this.state.goalHints.rows[a][b] !== currentHints.rows[a][b]) return false;\r\n      }\r\n    }\r\n\r\n    // Compare column hint numbers.\r\n    for (let a = 0; a < this.state.goalHints.cols.length; a++) {\r\n      if (this.state.goalHints.cols[a].length != currentHints.cols[a].length) return false;\r\n      for (let b = 0; b < this.state.goalHints.cols[a].length; b++) {\r\n        if (this.state.goalHints.cols[a][b] !== currentHints.cols[a][b]) return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Retrieve square index in 1-D array using the\r\n   * [row][column] indices one would expect from a 2-D array.\r\n   * \r\n   * @param {Number} row Row that square is located.\r\n   * @param {Number} col Column that square is located.\r\n   */\r\n  getSquareIndex(row, col) {\r\n    return col + (this.state.dimensions.cols * row);\r\n  }\r\n\r\n  /**\r\n   * Append current board state to history of board states.\r\n   * \r\n   * Should be called whenever we finish changing square values.\r\n   * \r\n   * At the moment, this is called whenever we let go of a mouse button.\r\n   * This means we can capture multiple square value changes in a single\r\n   * append as long as the mouse button is held down and the cursor is\r\n   * dragged over multiple squares.\r\n   */\r\n  appendHistory() {\r\n    if (!this.state.changed) return;\r\n\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = this.state.current;\r\n\r\n    if (current !== history[history.length - 1].squares) {\r\n      this.setState({\r\n        history: history.concat([\r\n          {\r\n            squares: current,\r\n          }\r\n        ]),\r\n        stepNumber: history.length,\r\n        changed: false,\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      lMouseDown: false,\r\n      rMouseDown: false,\r\n      initialSquare: SquareValue.EMPTY,\r\n      currentAction: SquareValue.EMPTY,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deal with square click interaction.\r\n   * \r\n   * Should be called when user mouse cursor is hovering over\r\n   * a square on the game board and a mouse button is pressed down.\r\n   * \r\n   * Will alter the value of that square, and initiate the process\r\n   * of potentially holding the mouse button down and dragging over\r\n   * other squares in order to also alter their values.\r\n   * \r\n   * @param {MouseEvent} event Mouse event for determining which mouse button was pressed.\r\n   * @param {Number} loc Index of the square being clicked.\r\n   */\r\n  squareClick(event, loc) {\r\n    const current = this.state.current;\r\n    const squares = current.slice();\r\n    let lMouseDown = this.state.lMouseDown;\r\n    let rMouseDown = this.state.rMouseDown;\r\n    let initialSquare = squares[loc];\r\n    let currentAction = this.state.currentAction;\r\n    let changed = this.state.changed;\r\n\r\n    if (event.button === 0) {\r\n      if (event.type === \"mousedown\") {\r\n        lMouseDown = true;\r\n        currentAction = (initialSquare === SquareValue.EMPTY) ? SquareValue.FILLED : SquareValue.EMPTY;\r\n        squares[loc] = currentAction;\r\n        changed = true;\r\n      }\r\n    } else if (event.button === 2) {\r\n      if (event.type === \"mousedown\") {\r\n        rMouseDown = true;\r\n        currentAction = (initialSquare === SquareValue.EMPTY) ? SquareValue.MARKED : SquareValue.EMPTY;\r\n        squares[loc] = currentAction;\r\n        changed = true;\r\n      }\r\n    } else {\r\n      return;\r\n    }\r\n    this.setState({\r\n      current: squares,\r\n      lMouseDown: lMouseDown,\r\n      rMouseDown: rMouseDown,\r\n      initialSquare: initialSquare,\r\n      currentAction: currentAction,\r\n      changed: changed,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deal with square hover interaction.\r\n   * \r\n   * Should be called when user mouse cursor is hovering over\r\n   * a square on the game board.\r\n   * \r\n   * Will check if a mouse button is being held down,\r\n   * and if one is, the square's value may be altered.\r\n   * \r\n   * @param {Number} loc Index of the square being hovered over.\r\n   */\r\n  squareHover(loc) {\r\n    let lMouseDown = this.state.lMouseDown;\r\n    let rMouseDown = this.state.rMouseDown;\r\n    let changed = this.state.changed;\r\n    \r\n    if (!lMouseDown && !rMouseDown) return;\r\n\r\n    const current = this.state.current;\r\n    const squares = current.slice();\r\n    let initialSquare = this.state.initialSquare;\r\n    let currentAction = this.state.currentAction;\r\n\r\n    if (initialSquare === squares[loc]) {\r\n      squares[loc] = currentAction;\r\n      changed = true;\r\n    } else {\r\n      return;\r\n    }\r\n    \r\n    this.setState({\r\n      current: squares,\r\n      changed: changed,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieve row and column hint numbers and return them.\r\n   * \r\n   * @return {Object} Return object containing two arrays (rows[], cols[]).\r\n   */\r\n  getHintNumbers(squares) {\r\n    const dimensions = this.state.dimensions;\r\n    const hintNumbers = {\r\n      rows: [],\r\n      cols: [],\r\n    };\r\n\r\n    // Find row hint numbers.\r\n    for (let row = 0; row < dimensions.rows; row++) {\r\n      let rowHints = [];\r\n      let num = 0;\r\n\r\n      for ( let col = 0; col < dimensions.cols; col++) {\r\n        if (squares[this.getSquareIndex(row, col)] === SquareValue.FILLED) num++;\r\n        else if (num) {\r\n          rowHints.push(num);\r\n          num = 0;\r\n        }\r\n      }\r\n      if (num || !rowHints.length) rowHints.push(num);\r\n      hintNumbers.rows.push(rowHints);\r\n    }\r\n\r\n    // Find column hint numbers.\r\n    for (let col = 0; col < dimensions.cols; col++) {\r\n      let colHints = [];\r\n      let num = 0;\r\n\r\n      for ( let row = 0; row < dimensions.rows; row++) {\r\n        if (squares[this.getSquareIndex(row, col)] === SquareValue.FILLED) num++;\r\n        else if (num) {\r\n          colHints.push(num);\r\n          num = 0;\r\n        }\r\n      }\r\n      if (num || !colHints.length) colHints.push(num);\r\n      hintNumbers.cols.push(colHints);\r\n    }\r\n\r\n    return hintNumbers;\r\n  }\r\n\r\n  /**\r\n   * Jump to a particular point in the history of actions.\r\n   * If the step doesn't exist in the history as an index, do nothing.\r\n   * \r\n   * @param {Number} step The index of the action state to jump to.\r\n   */\r\n  jumpTo(step) {\r\n    if (step < 0 || step >= this.state.history.length) return;\r\n\r\n    this.setState({\r\n      current: this.state.history[step].squares,\r\n      stepNumber: step,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Undo the most recent action.\r\n   * If there is no action to undo, do nothing.\r\n   * \r\n   * As soon as we commit a new action, we cut off any actions\r\n   * in front of the current action in the action history.\r\n   */\r\n  undoAction() {\r\n    const stepNumber = this.state.stepNumber;\r\n\r\n    if (!stepNumber) return;\r\n\r\n    this.setState({\r\n      current: this.state.history[stepNumber - 1].squares,\r\n      stepNumber: stepNumber - 1,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Redo an undo.\r\n   * If any actions have been undone by the undoAction()\r\n   * function, we can redo them with this function.\r\n   * \r\n   * As soon as we commit a new action, we cut off any actions\r\n   * in front of the current action in the action history.\r\n   */\r\n  redoAction() {\r\n    const stepNumber = this.state.stepNumber;\r\n\r\n    if (stepNumber === this.state.history.length - 1) return;\r\n\r\n    this.setState({\r\n      current: this.state.history[stepNumber + 1].squares,\r\n      stepNumber: stepNumber + 1,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restart with a new game board.\r\n   */\r\n  restart() {\r\n    let sel = document.getElementById('dimensions-select');\r\n    const index = sel.selectedIndex;\r\n    const nextDimensions = {\r\n      rows: DimensionsChoices[index][1],\r\n      cols: DimensionsChoices[index][0]\r\n    }\r\n    const size = nextDimensions.rows * nextDimensions.cols;\r\n\r\n    this.setState({\r\n      dimensions: nextDimensions,\r\n      current: Array(size).fill(SquareValue.EMPTY),\r\n      history: [{\r\n        squares: Array(size).fill(SquareValue.EMPTY),\r\n      }],\r\n      stepNumber: 0,\r\n      goalHints: {\r\n        rows: [],\r\n        cols: [],\r\n      },\r\n      lMouseDown: false,\r\n      rMouseDown: false,\r\n      initialSquare: SquareValue.EMPTY,\r\n      currentAction: SquareValue.EMPTY,\r\n      changed: false,\r\n      seconds: 0,\r\n      timer: \"00:00:00\",\r\n    });\r\n  }\r\n\r\n  render() {\r\n    /*\r\n    const history = this.state.history;\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ?\r\n        'Go to move #' + move :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n    */\r\n\r\n   const current = this.state.current;\r\n\r\n    return (\r\n      <div\r\n        className=\"game\"\r\n        onContextMenu={(e)=> e.preventDefault()}\r\n        onMouseUp={() => this.appendHistory()}\r\n      >\r\n        <div className=\"left-panel\">\r\n          <div className=\"game-info\">\r\n            <div>{this.state.timer}</div>\r\n            <div>{(this.winCheck()) ? 'You won!' : ''}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"right-panel\">\r\n          <div className=\"upper-board\">\r\n            <HintNumbers\r\n              values={this.state.goalHints.cols}\r\n              area='upper'\r\n              type='col'\r\n            />\r\n          </div>\r\n          <div className=\"lower-board\">\r\n            <HintNumbers\r\n              values={this.state.goalHints.rows}\r\n              area='left'\r\n              type='row'\r\n            />\r\n            <Board\r\n              squares={current}\r\n              dimensions={this.state.dimensions}\r\n              onMouseDown={(event, loc) => this.squareClick(event, loc)}\r\n              onMouseEnter={loc => this.squareHover(loc)}\r\n            />\r\n          </div>\r\n          <div className=\"undo-redo\">\r\n            <span className=\"material-icons\" onClick={() => this.undoAction()}>undo</span>\r\n            <span className=\"material-icons\" onClick={() => this.redoAction()}>redo</span>\r\n            <span className=\"material-icons\" onClick={() => this.restart()}>replay</span>\r\n            <DimensionChoices/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Game from './components/game'\r\nimport \"./index.css\";\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('app'),\r\n);"],"sourceRoot":""}