{"version":3,"sources":["components/common/constants.js","components/game/index.js","index.js"],"names":["DefaultDimensions","SquareValue","EMPTY","FILLED","MARKED","properties","1","name","2","3","HintNumbers","props","hintNumbers","a","values","length","aSection","b","push","className","type","area","Square","index","value","onMouseDown","onMouseEnter","Board","loc","this","squares","event","cols","col","dimensions","rows","temp","row","renderSquare","React","Component","Game","size","state","current","Array","fill","history","stepNumber","currentHints","goalHints","lMouseDown","rMouseDown","initialSquare","currentAction","changed","seconds","timer","setState","Date","toISOString","substr","interval","setInterval","tick","slice","getHintNumbers","concat","console","log","button","rowHints","num","getSquareIndex","colHints","step","onContextMenu","e","preventDefault","onMouseUp","appendHistory","squareClick","squareHover","onClick","undoAction","redoAction","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.425caf90.chunk.js","sourcesContent":["export var DefaultDimensions = {\r\n  ROWS: 5,\r\n  COLS: 5,\r\n};\r\n\r\nexport var SquareValue = {\r\n  EMPTY: 1,\r\n  FILLED: 2,\r\n  MARKED: 3,\r\n  properties: {\r\n    1: {name: \"empty\"},\r\n    2: {name: \"filled\"},\r\n    3: {name: \"marked\"}\r\n  }\r\n};","import React from \"react\";\r\nimport { DefaultDimensions, SquareValue } from \"../common/constants.js\";\r\nimport \"./index.css\";\r\n\r\nfunction HintNumbers(props) {\r\n  let hintNumbers = [];\r\n\r\n  for (let a = 0; a < props.values.length; a++) {\r\n    let aSection = [];\r\n\r\n    for (let b = 0; b < props.values[a].length; b++) {\r\n      aSection.push(<div className=\"hint\">{props.values[a][b]}</div>);\r\n    }\r\n\r\n    hintNumbers.push(<div className={\"hint-\" + props.type}>{aSection}</div>);\r\n  }\r\n\r\n  return (\r\n    <div className={props.area + '-hints'}>\r\n      {hintNumbers}\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Translates individual board squares into HTML div elements.\r\n * \r\n * @param {*} props \r\n */\r\nfunction Square(props) {\r\n  const index = (typeof props.value === 'undefined') ? 1 : props.value;\r\n  const value = SquareValue.properties[index].name;\r\n\r\n  return (\r\n    <div\r\n      className={'square square-' + value}\r\n      onMouseDown={props.onMouseDown}\r\n      onMouseEnter={props.onMouseEnter}\r\n    > \r\n      <span className=\"material-icons\">cancel</span>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * A game board made up of squares.\r\n */\r\nclass Board extends React.Component {\r\n  renderSquare(loc) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[loc]}\r\n        onMouseDown={(event) => this.props.onMouseDown(event, loc)}\r\n        onMouseEnter={() => this.props.onMouseEnter(loc)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const cols = [];\r\n    let loc = 0\r\n\r\n    for (let col = 0; col < this.props.dimensions.rows; col++) {\r\n      let temp = [];\r\n      for (let row = 0; row < this.props.dimensions.cols; row++) {\r\n        temp.push(this.renderSquare(loc++));\r\n      }\r\n      cols.push(temp);\r\n    }\r\n\r\n    const rows = [];\r\n    for (let row = 0; row < this.props.dimensions.rows; row++) {\r\n      rows.push(<div className=\"board-row\">{cols[row]}</div>);\r\n    }\r\n    return (\r\n      <div className=\"game-board\">\r\n        {rows}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * The main component that is called on by ReactDOM.render().\r\n */\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const size = DefaultDimensions.ROWS * DefaultDimensions.COLS;\r\n\r\n    this.state = {\r\n      /** Number of rows and columns in game board. */\r\n      dimensions: {\r\n        rows: DefaultDimensions.ROWS,\r\n        cols: DefaultDimensions.COLS,\r\n      },\r\n      /** Current board state. */\r\n      current: Array(size).fill(SquareValue.EMPTY),\r\n      /** History of board states. Initial board state will always be empty. */\r\n      history: [{\r\n        squares: Array(size).fill(SquareValue.EMPTY),\r\n      }],\r\n      /** Index of history that we're currently at. */\r\n      stepNumber: 0,\r\n      /** Current hint numbers. */\r\n      currentHints: {\r\n        rows: [],\r\n        cols: [],\r\n      },\r\n      /** Goal hint numbers. */\r\n      goalHints: {\r\n        rows: [],\r\n        cols: [],\r\n      },\r\n      /** Whether or not the left mouse button is currently held down. */\r\n      lMouseDown: false,\r\n      /** Whether or not the right mouse button is currently held down. */\r\n      rMouseDown: false,\r\n      /** Value of first square clicked. Reset when mouse button is let go. */\r\n      initialSquare: SquareValue.EMPTY,\r\n      /** Value we're currently changing squares to. Reset when mouse button is let go. */\r\n      currentAction: SquareValue.EMPTY,\r\n      /** Whether or not the board's current state has been changed since the last time we appended to history. */\r\n      changed: false,\r\n      /** The number of seconds that have elapsed since board initialization. */\r\n      seconds: 0,\r\n      /** A string timer keeping track of hours:minutes:seconds elapsed since board initialization. */\r\n      timer: \"00:00:00\",\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initially called by componentDidMount().\r\n   * \r\n   * Will be called once every 1,000 milliseconds (1 second)\r\n   * in order to update the in-game clock.\r\n   */\r\n  tick() {\r\n    this.setState(state => ({\r\n      seconds: state.seconds + 1,\r\n      timer: new Date(1000 * (this.state.seconds + 1)).toISOString().substr(11, 8)\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Called once on initial load.\r\n   */\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.tick(), 1000);\r\n  }\r\n\r\n  /**\r\n   * Retrieve square index in 1-D array using the\r\n   * [row][column] indices one would expect from a 2-D array.\r\n   * \r\n   * @param {Number} row Row that square is located.\r\n   * @param {Number} col Column that square is located.\r\n   */\r\n  getSquareIndex(row, col) {\r\n    return col + (this.state.dimensions.cols * row);\r\n  }\r\n\r\n  /**\r\n   * Append current board state to history of board states.\r\n   * \r\n   * Should be called whenever we finish changing square values.\r\n   * \r\n   * At the moment, this is called whenever we let go of a mouse button.\r\n   * This means we can capture multiple square value changes in a single\r\n   * append as long as the mouse button is held down and the cursor is\r\n   * dragged over multiple squares.\r\n   */\r\n  appendHistory() {\r\n    if (!this.state.changed) return;\r\n\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = this.state.current;\r\n    const hintNumbers = this.getHintNumbers();\r\n\r\n    if (current !== history[history.length - 1].squares) {\r\n      this.setState({\r\n        history: history.concat([\r\n          {\r\n            squares: current,\r\n          }\r\n        ]),\r\n        stepNumber: history.length,\r\n        currentHints: hintNumbers,\r\n        changed: false,\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      lMouseDown: false,\r\n      rMouseDown: false,\r\n      initialSquare: SquareValue.EMPTY,\r\n      currentAction: SquareValue.EMPTY,\r\n    });\r\n\r\n    console.log(this.state.currentHints);\r\n  }\r\n\r\n  /**\r\n   * Deal with square click interaction.\r\n   * \r\n   * Should be called when user mouse cursor is hovering over\r\n   * a square on the game board and a mouse button is pressed down.\r\n   * \r\n   * Will alter the value of that square, and initiate the process\r\n   * of potentially holding the mouse button down and dragging over\r\n   * other squares in order to also alter their values.\r\n   * \r\n   * @param {MouseEvent} event Mouse event for determining which mouse button was pressed.\r\n   * @param {Number} loc Index of the square being clicked.\r\n   */\r\n  squareClick(event, loc) {\r\n    const current = this.state.current;\r\n    const squares = current.slice();\r\n    let lMouseDown = this.state.lMouseDown;\r\n    let rMouseDown = this.state.rMouseDown;\r\n    let initialSquare = squares[loc];\r\n    let currentAction = this.state.currentAction;\r\n    let changed = this.state.changed;\r\n\r\n    if (event.button === 0) {\r\n      if (event.type === \"mousedown\") {\r\n        lMouseDown = true;\r\n        currentAction = (initialSquare === SquareValue.EMPTY) ? SquareValue.FILLED : SquareValue.EMPTY;\r\n        squares[loc] = currentAction;\r\n        changed = true;\r\n      }\r\n    } else if (event.button === 2) {\r\n      if (event.type === \"mousedown\") {\r\n        rMouseDown = true;\r\n        currentAction = (initialSquare === SquareValue.EMPTY) ? SquareValue.MARKED : SquareValue.EMPTY;\r\n        squares[loc] = currentAction;\r\n        changed = true;\r\n      }\r\n    } else {\r\n      return;\r\n    }\r\n    this.setState({\r\n      current: squares,\r\n      lMouseDown: lMouseDown,\r\n      rMouseDown: rMouseDown,\r\n      initialSquare: initialSquare,\r\n      currentAction: currentAction,\r\n      changed: changed,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deal with square hover interaction.\r\n   * \r\n   * Should be called when user mouse cursor is hovering over\r\n   * a square on the game board.\r\n   * \r\n   * Will check if a mouse button is being held down,\r\n   * and if one is, the square's value may be altered.\r\n   * \r\n   * @param {Number} loc Index of the square being hovered over.\r\n   */\r\n  squareHover(loc) {\r\n    let lMouseDown = this.state.lMouseDown;\r\n    let rMouseDown = this.state.rMouseDown;\r\n    let changed = this.state.changed;\r\n    \r\n    if (!lMouseDown && !rMouseDown) return;\r\n\r\n    const current = this.state.current;\r\n    const squares = current.slice();\r\n    let initialSquare = this.state.initialSquare;\r\n    let currentAction = this.state.currentAction;\r\n\r\n    if (initialSquare === squares[loc]) {\r\n      squares[loc] = currentAction;\r\n      changed = true;\r\n    } else {\r\n      return;\r\n    }\r\n    \r\n    this.setState({\r\n      current: squares,\r\n      changed: changed,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieve row and column hint numbers and return them.\r\n   * \r\n   * @return {Object} Return object containing two arrays (rows[], cols[]).\r\n   */\r\n  getHintNumbers() {\r\n    const current = this.state.current;\r\n    const dimensions = this.state.dimensions;\r\n    const hintNumbers = {\r\n      rows: [],\r\n      cols: [],\r\n    };\r\n\r\n    // Find row hint numbers.\r\n    for (let row = 0; row < dimensions.rows; row++) {\r\n      let rowHints = [];\r\n      let num = 0;\r\n\r\n      for ( let col = 0; col < dimensions.cols; col++) {\r\n        if (current[this.getSquareIndex(row, col)] === SquareValue.FILLED) num++;\r\n        else if (num) {\r\n          rowHints.push(num);\r\n          num = 0;\r\n        }\r\n      }\r\n      if (num || !rowHints.length) rowHints.push(num);\r\n      hintNumbers.rows.push(rowHints);\r\n    }\r\n\r\n    // Find column hint numbers.\r\n    for (let col = 0; col < dimensions.cols; col++) {\r\n      let colHints = [];\r\n      let num = 0;\r\n\r\n      for ( let row = 0; row < dimensions.rows; row++) {\r\n        if (current[this.getSquareIndex(row, col)] === SquareValue.FILLED) num++;\r\n        else if (num) {\r\n          colHints.push(num);\r\n          num = 0;\r\n        }\r\n      }\r\n      if (num || !colHints.length) colHints.push(num);\r\n      hintNumbers.cols.push(colHints);\r\n    }\r\n\r\n    return hintNumbers;\r\n  }\r\n\r\n  /**\r\n   * Jump to a particular point in the history of actions.\r\n   * If the step doesn't exist in the history as an index, do nothing.\r\n   * \r\n   * @param {Number} step The index of the action state to jump to.\r\n   */\r\n  jumpTo(step) {\r\n    if (step < 0 || step >= this.state.history.length) return;\r\n\r\n    this.setState({\r\n      current: this.state.history[step].squares,\r\n      stepNumber: step,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Undo the most recent action.\r\n   * If there is no action to undo, do nothing.\r\n   * \r\n   * As soon as we commit a new action, we cut off any actions\r\n   * in front of the current action in the action history.\r\n   */\r\n  undoAction() {\r\n    const stepNumber = this.state.stepNumber;\r\n\r\n    if (!stepNumber) return;\r\n\r\n    this.setState({\r\n      current: this.state.history[stepNumber - 1].squares,\r\n      stepNumber: stepNumber - 1,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Redo an undo.\r\n   * If any actions have been undone by the undoAction()\r\n   * function, we can redo them with this function.\r\n   * \r\n   * As soon as we commit a new action, we cut off any actions\r\n   * in front of the current action in the action history.\r\n   */\r\n  redoAction() {\r\n    const stepNumber = this.state.stepNumber;\r\n\r\n    if (stepNumber === this.state.history.length - 1) return;\r\n\r\n    this.setState({\r\n      current: this.state.history[stepNumber + 1].squares,\r\n      stepNumber: stepNumber + 1,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    /*\r\n    const history = this.state.history;\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ?\r\n        'Go to move #' + move :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n    */\r\n\r\n   const current = this.state.current;\r\n\r\n    return (\r\n      <div\r\n        className=\"game\"\r\n        onContextMenu={(e)=> e.preventDefault()}\r\n        onMouseUp={() => this.appendHistory()}\r\n      >\r\n        <div className=\"left-panel\">\r\n          <div className=\"game-info\">\r\n            <div>{this.state.timer}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"right-panel\">\r\n          <div className=\"upper-board\">\r\n            <HintNumbers\r\n              values={this.state.currentHints.cols}\r\n              area='upper'\r\n              type='col'\r\n            />\r\n          </div>\r\n          <div className=\"lower-board\">\r\n            <HintNumbers\r\n              values={this.state.currentHints.rows}\r\n              area='left'\r\n              type='row'\r\n            />\r\n            <Board\r\n              squares={current}\r\n              dimensions={this.state.dimensions}\r\n              onMouseDown={(event, loc) => this.squareClick(event, loc)}\r\n              onMouseEnter={loc => this.squareHover(loc)}\r\n            />\r\n          </div>\r\n          <div className=\"undo-redo\">\r\n            <span className=\"material-icons\" onClick={() => this.undoAction()}>undo</span>\r\n            <span className=\"material-icons\" onClick={() => this.redoAction()}>redo</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Game from './components/game'\r\nimport \"./index.css\";\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('app'),\r\n);"],"sourceRoot":""}